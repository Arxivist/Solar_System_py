from visual import *
#from numpy import *
#from math import *
scene = display(title='Solar System',width = 1000, height = 1000)


GAMMA = 6.67408e-11
MASS_SUN = 1.989e30
#step for procedural analysis
DELTA = 100000

class planet:
    #
    # Orbital Elements:
    # 0 - a (Semimajor axis, Au)
    # 1 - e (eccentricity)
    # 2 - i (incluniation, Deg)
    # 3 - omega (longitude of ascending node, Deg)
    # 4 - w (argument of periapsis, Deg)
    # 5 - M0 (true anomoly at epoch, longitude Jan 2000, deg )
    # 6 - Mass
    def __init__(self,a,e,i,omega,w,M0,mass,name):
        self.a = a
        self.e = e
        i=i*pi/180
        self.i = i
        omega = omega*pi/180
        self.omega = omega
        w=w*pi/180
        self.w = w
        M0 = M0*pi/180
        self.M0 = M0
        self.mass = mass
        self.radius = 5e9

        #find semiminor axis (b)
        b = a*sqrt(1-pow(e,2))
        #find vector associated with semimajor axis
        va = vector(a*cos(i)*cos(w),a*cos(i)*sin(w),a*sin(i))
        ua = va/mag(va)
        #find unit vector associated with semiminor axis
        #note, fix this later to add inclination, currently slightly off
        vb = vector(b * cos(w-pi/2), b * sin(w-pi/2), 0)
        ub = vb / mag(vb)
        #calculate initial position
        self.pos = vector(0+a*cos(M0)*ua.x+b*sin(M0)*ub.x,0+a*cos(M0)*ua.y+b*sin(M0)*ub.y,0+a*cos(M0)*ua.z+b*sin(M0)*ub.z)
        # Calculate the initial velocity
        # assumptions made: Orbiting Sun, with sun at centre of orbit
        #Calculate speed using v=sqrt(G*M*(2/r-1/a)
        speed = sqrt(GAMMA*MASS_SUN*(2/mag(self.pos)-1/a))
        #velocity is perpindicular to orbital elliptacal. Take unit vector of velocity and multiply by speed to get initial velocity
        self.vel = norm(-a*sin(M0)*ua+b*cos(M0)*ub)*speed

        #display elements
        self.sphere = sphere(pos = self.pos,radius = self.radius, make_trail=True, color=color.gray(50))
        self.trail =curve(color=color.red)
        #add label
        self.label = label(pos=self.pos, text=name)


lPlanets = []
#initialize Mercury
lPlanets.append(planet(0.38709893*1.496e+11,0.20563069,7.00487,48.33167,77.45645,252.25084,3.285e23,'Mercury'))

#initialize Venus
lPlanets.append(planet(0.72333199*1.496e+11,0.00677323,3.39471,76.68069,131.53298,181.97973,4.87e24,'Venus'))

# initialize Earth
lPlanets.append(planet(1.00000011*1.496e+11,0.01671022,0.00005,-11.26064,102.94719,100.46435, 5.972e24,'Earth'))
lPlanets[2].sphere.material = materials.earth

#initialize Mars
lPlanets.append(planet(1.52366231*1.496e+11,0.09341233,1.85061,49.57854,336.04084,355.45332,6.39e23,'Mars'))

#initialize Jupiter
lPlanets.append(planet(5.20336301*1.496e+11,0.04839266,	1.30530,100.55615,14.75385,34.40438, 1.89e27,'Jupiter'))

#initialize Saturn
lPlanets.append(planet(9.53707032*1.496e+11,	0.05415060,	2.48446,	113.71504,	92.43194,	49.94432, 5.68e26,'Saturn'))

#initialize Uranus
lPlanets.append(planet(19.19126393*1.496e+11,	0.04716771,	0.76986	,74.22988,	170.96424,	313.23218, 8.68e25,'Uranus'))

#initialize Neptune
lPlanets.append(planet(30.06896348*1.496e+11,	0.00858587,	1.76917,	131.72169,	44.97135,	304.88003, 10.24e24,'Neptune'))

#initialize Pluto
lPlanets.append(planet(39.48168677*1.496e+11,	0.24880766,	17.14175,	110.30347,	224.06676,	238.92881, 1.25e22,'Pluto'))

Sun = sphere(pos=(0,0,0),radius = 1e10, color = color.orange, material = materials.emissive)

# move the planets using calculations for gravits and sympletic euler methods
for i in range (30000):
    rate(50)

    for x in range (len(lPlanets)):
        # use newtons equation for gravity, F = G*M1*M2/r^2
        F = -1*norm(lPlanets[x].pos)*(GAMMA * MASS_SUN*lPlanets[x].mass/(pow(mag(lPlanets[x].pos),2)))
        #use F = M*A to find accelelration of planet
        A = F/lPlanets[x].mass
        lPlanets[x].vel += DELTA*A
        lPlanets[x].pos += DELTA * lPlanets[x].vel
        lPlanets[x].sphere.pos = lPlanets[x].pos
        lPlanets[x].trail.append(pos=lPlanets[x].sphere.pos)

        #move labels
        lPlanets[x].label.pos = lPlanets[x].pos





