import Tkinter
import numpy as np
from visual import *

top = Tkinter.Tk()
GAMMA = 6.67408e-11
MASS_SUN = 1.989e30
# step for procedural analysis
DELTA = 10000

class planet:
    #
    # Orbital Elements:
    # 0 - a (Semimajor axis, Au)
    # 1 - e (eccentricity)
    # 2 - i (incluniation, Deg)
    # 3 - omega (longitude of ascending node, Deg)
    # 4 - w (argument of periapsis, Deg)
    # 5 - M0 (true anomoly at epoch, longitude Jan 2000, deg )
    # 6 - Mass
    def __init__(self, a, e, i, omega, w, M0, mass, name):
        self.a = a
        #e=0
        self.e = e
        #i = 10
        i = i * pi / 180
        self.i = i
        omega = omega * pi / 180
        self.omega = omega
        w = w * pi / 180
        self.w = w
        M0 = M0 * pi / 180
        self.M0 = M0
        self.mass = mass
        self.name = name
        self.radius = 3e9

        # find semiminor axis (b)
        b = a * sqrt(1 - pow(e, 2))

        #store self.b for later use
        self.b = b

        # find vector associated with semimajor and semiminor axes
        # find the inclination in z-plane of the semi-major vector
        i_a = asin(sin(i)*sin(w))
        # find the rotation in the xy plane of the semimajor vector. Equal to omage, plus the value of w projected onto the xy plane.
        w_a = atan((sin(w)*cos(i))/cos(w))
        theta = omega + w_a
        #calculate vector
        va = vector(a * cos(i_a) * cos(theta), a * cos(i_a) * sin(theta), a * sin(i_a))
        ua = va / mag(va)

        # find unit vector associated with semiminor axis
        # find the inclination in z-plane of the semi-minor vector
        i_b = asin(sin(i) * sin(w+pi/2))
        # calculate vector
        vb = vector(b * cos(i_b)*cos(theta + pi / 2), b * cos(i_b)*sin(theta + pi / 2), b * sin(i_b))
        ub = vb / mag(vb)


        # find the centre of the focal point that the sun is at
        f1 = va-va*(1-e)
        f2 = va-va*(1+e)

        #correct for centering around f1
        va -= f1
        vb -= f1


        # calculate initial position
        self.pos = vector(-f1.x + a * cos(M0) * ua.x + b * sin(M0) * ub.x,
                          -f1.y + a * cos(M0) * ua.y + b * sin(M0) * ub.y,
                          -f1.z + a * cos(M0) * ua.z + b * sin(M0) * ub.z)

        # calculate location of ascending node
        # ellipse has been rotated such that the semimajor axis is at 0
        self.asc_node = vector(-f1.x + a * cos(-w) * ua.x + b * sin(-w) * ub.x,
                               -f1.y + a * cos(-w) * ua.y + b * sin(-w) * ub.y,
                               -f1.z + a * cos(-w) * ua.z + b * sin(-w) * ub.z)

        # Calculate the initial velocity
        # assumptions made: Orbiting Sun, with sun at centre of orbit
        # Calculate speed using v=sqrt(G*M*(2/r-1/a)
        speed = sqrt(GAMMA * MASS_SUN * (2 / mag(self.pos) - 1 / a))
        # velocity is perpindicular to orbital elliptacal. Take unit vector of velocity and multiply by speed to get initial velocity
        self.vel = norm(-a * sin(M0) * ua + b * cos(M0) * ub) * speed

        # display elements, nothing beyond here in the init is required to run
        self.sphere = sphere(pos=self.pos, radius=self.radius, make_trail=True, color=color.gray(50))
        self.trail = curve(color=color.red)
        # add label
        self.label = label(pos=self.pos, text=name)

        #display the orbit
        t = np.linspace(0, 2 * pi, num=200)
        self.orbit = curve(x=-f1.x + a * cos(t) * ua.x + b * sin(t) * ub.x,
                           y=-f1.y + a * cos(t) * ua.y + b * sin(t) * ub.y,
                           z=-f1.z + a * cos(t) * ua.z + b * sin(t) * ub.z,
                           color=color.orange)

        self.ref_orbit = curve(x=-f1.x + a * cos(t) * ua.x + b * sin(t) * ub.x,
                           y=-f1.y + a * cos(t) * ua.y + b * sin(t) * ub.y,
                           z=-f1.z,
                           color=color.white)

        # above equations have transformed f1 to (0,0,0) anf f2 to 2*f2, need to reflect that.
        f1 = (0,0,0)
        f2 = 2*f2

        self.f1_label = label(pos=f1, text="f1")
        self.f2_label = label(pos=f2, text="f2")
        self.f2_point = points(pos=f2, size=5, color=color.green)
        self.a_disp = curve(pos=[(f2/2),va],color=color.green)
        self.a_point = points(pos=va, size = 5, color = color.green)
        self.a_label = label(pos=((va+f2/2)/2), text="a")

        #display semi-minor axis
        self.b_disp = curve(pos=[(f2/2),vb],color=color.blue)
        self.b_label = label(pos=(vb+f2/2)/2, text="b")

        #display ascending node
        self.asc_node_label = label(pos=self.asc_node, text="A_n")
        self.asc_node_point = points(pos=self.asc_node, size=10, color=color.green)

        # display axis
        self.x_disp = curve(pos=[f1,(1e11,0,0)], color=color.white)
        self.x_label = label(pos=(1e11,0,0), text="x")

        self.y_disp = curve(pos=[f1, (0,1e11,  0)], color=color.white)
        self.y_label = label(pos=(0,1e11,  0), text="y")

        self.z_disp = curve(pos=[f1, ( 0, 0,1e11)], color=color.white)
        self.z_label = label(pos=(0, 0,1e11), text="z")

    def calculate(self):
        a = self.a
        e =self.e
        i = self.i
        omega = self.omega
        w = self.w
        M0 = self.M0

        # find semiminor axis (b)
        b = a * sqrt(1 - pow(e, 2))

        # store self.b for later use
        self.b = b

        # find vector associated with semimajor and semiminor axes
        # find the inclination in z-plane of the semi-major vector
        i_a = asin(sin(i) * sin(w))
        # find the rotation in the xy plane of the semimajor vector. Equal to omage, plus the value of w projected onto the xy plane.
        w_a = atan((sin(w) * cos(i)) / cos(w))
        theta = omega + w_a
        # calculate vector
        va = vector(a * cos(i_a) * cos(theta), a * cos(i_a) * sin(theta), a * sin(i_a))
        ua = va / mag(va)

        # find unit vector associated with semiminor axis
        # find the inclination in z-plane of the semi-minor vector
        i_b = asin(sin(i) * sin(w + pi / 2))
        # calculate vector
        vb = vector(b * cos(i_b) * cos(theta + pi / 2), b * cos(i_b) * sin(theta + pi / 2), b * sin(i_b))
        ub = vb / mag(vb)

        # find the centre of the focal point that the sun is at
        f1 = va - va * (1 - e)
        f2 = va - va * (1 + e)

        # correct for centering around f1
        va -= f1
        vb -= f1

        # calculate location of ascending node
        # ellipse has been rotated such that the semimajor axis is at 0
        self.asc_node = vector(-f1.x + a * cos(-w) * ua.x + b * sin(-w) * ub.x,
                               -f1.y + a * cos(-w) * ua.y + b * sin(-w) * ub.y,
                               -f1.z + a * cos(-w) * ua.z + b * sin(-w) * ub.z)

        # update the orbit and the reference orbit
        t = np.linspace(0, 2 * pi, num=200)
        self.orbit.x = -f1.x + a * cos(t) * ua.x + b * sin(t) * ub.x
        self.orbit.y = -f1.y + a * cos(t) * ua.y + b * sin(t) * ub.y
        self.orbit.z = -f1.z + a * cos(t) * ua.z + b * sin(t) * ub.z

        self.ref_orbit.x=-f1.x + a * cos(t) * ua.x + b * sin(t) * ub.x
        self.ref_orbit.y=-f1.y + a * cos(t) * ua.y + b * sin(t) * ub.y
        self.ref_orbit.z=-f1.z

        # above equations have transformed f1 to (0,0,0) anf f2 to 2*f2, need to reflect that.
        f1 = (0,0,0)
        f2 = 2*f2

        # update the locations of the various pieces of information
        self.f1_label.pos = f1
        self.f2_label.pos = f2
        self.f2_point.pos = f2
        self.a_disp.pos = [(f2/2),va]
        self.a_point.pos = va
        self.a_label.pos = ((va+f2/2)/2)

        #update semi-minor axis
        self.b_disp.pos=[(f2/2),vb]
        self.b_label.pos=(vb+f2/2)/2

        #update ascending node
        self.asc_node_label.pos=self.asc_node
        self.asc_node_point.pos=self.asc_node


scene = display(x=50, y=30, width=1400, height=1000)
Sun = sphere(pos=(0, 0, 0), radius=1e10, color=color.orange, material=materials.emissive)
lPlanets = []
lPlanets.append(planet(0.38709893 * 1.496e+11, 0.20563069, 7.00487, 48.33167, 77.45645, 252.25084, 3.285e23, 'Mercury'))


def helloCallBack():
    lPlanets[0].sphere.color = color.red

def update_loop ():
    #Select the planet we are working with
    x=0

    # use newtons equation for gravity, F = G*M1*M2/r^2
    F = -1 * norm(lPlanets[x].pos) * (GAMMA * MASS_SUN * lPlanets[x].mass / (pow(mag(lPlanets[x].pos), 2)))
    # use F = M*A to find accelelration of planet
    A = F / lPlanets[x].mass

    # symplectic Euler
    lPlanets[x].vel += DELTA * A
    lPlanets[x].pos += DELTA * lPlanets[x].vel

    # display info
    lPlanets[x].sphere.pos = lPlanets[x].pos
    lPlanets[x].trail.append(pos=lPlanets[x].sphere.pos)

    # move labels
    lPlanets[x].label.pos = lPlanets[x].pos

    # check to see if any of the sliders have changed (a, e, i, omega, w)
    e_new = e_scale.get()
    i_new = i_scale.get()
    omega_new = omega_scale.get()
    w_new = w_scale.get()
    if lPlanets[x].e != e_new:
        lPlanets[x].e = e_new
        lPlanets[x].calculate()
    elif lPlanets[x].i != i_new:
        lPlanets[x].i = i_new
        lPlanets[x].calculate()
    elif lPlanets[x].omega != omega_new:
        lPlanets[x].omega = omega_new
        lPlanets[x].calculate()
    elif lPlanets[x].w != w_new:
        lPlanets[x].w = w_new
        lPlanets[x].calculate()

    # run loop again in 50 ms
    top.after(50,update_loop)

# layout of GUI
LF = Tkinter.LabelFrame(top, height = 300, width = 300)
LF.pack()

B = Tkinter.Button(top, text ="Hello", command = helloCallBack)
B.pack()

e_scale = Tkinter.Scale(top, from_=0, to=1, resolution =0.01, orient = "horizontal", label = "e", length = 250)
e_scale.set(lPlanets[0].e)
e_scale.pack()

i_scale = Tkinter.Scale(top, from_=0, to=2*pi, resolution =0.1, orient = "horizontal", label = "i", length = 250)
i_scale.set(lPlanets[0].i)
i_scale.pack()

omega_scale = Tkinter.Scale(top, from_=0, to=2*pi, resolution =0.1, orient = "horizontal", label = "omega", length = 250)
omega_scale.set(lPlanets[0].omega)
omega_scale.pack()

w_scale = Tkinter.Scale(top, from_=0, to=2*pi, resolution =0.1, orient = "horizontal", label = "w", length = 250)
w_scale.set(lPlanets[0].w)
w_scale.pack()


top.after(0, update_loop)
top.mainloop()



