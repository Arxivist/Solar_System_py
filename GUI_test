import Tkinter
import tkMessageBox
from visual import *

top = Tkinter.Tk()
GAMMA = 6.67408e-11
MASS_SUN = 1.989e30
# step for procedural analysis
DELTA = 100000

class planet:
    #
    # Orbital Elements:
    # 0 - a (Semimajor axis, Au)
    # 1 - e (eccentricity)
    # 2 - i (incluniation, Deg)
    # 3 - omega (longitude of ascending node, Deg)
    # 4 - w (argument of periapsis, Deg)
    # 5 - M0 (true anomoly at epoch, longitude Jan 2000, deg )
    # 6 - Mass
    def __init__(self, a, e, i, omega, w, M0, mass, name):
        self.a = a
        self.e = e
        i = i * pi / 180
        self.i = i
        omega = omega * pi / 180
        self.omega = omega
        w = w * pi / 180
        self.w = w
        M0 = M0 * pi / 180
        self.M0 = M0
        self.mass = mass
        self.radius = 5e9

        # find semiminor axis (b)
        b = a * sqrt(1 - pow(e, 2))
        # find vector associated with semimajor axis
        va = vector(a * cos(i) * cos(w), a * cos(i) * sin(w), a * sin(i))
        ua = va / mag(va)
        # find unit vector associated with semiminor axis
        # note, fix this later to add inclination, currently slightly off
        vb = vector(b * cos(w - pi / 2), b * sin(w - pi / 2), 0)
        ub = vb / mag(vb)
        # calculate initial position
        self.pos = vector(0 + a * cos(M0) * ua.x + b * sin(M0) * ub.x, 0 + a * cos(M0) * ua.y + b * sin(M0) * ub.y,
                          0 + a * cos(M0) * ua.z + b * sin(M0) * ub.z)
        # Calculate the initial velocity
        # assumptions made: Orbiting Sun, with sun at centre of orbit
        # Calculate speed using v=sqrt(G*M*(2/r-1/a)
        speed = sqrt(GAMMA * MASS_SUN * (2 / mag(self.pos) - 1 / a))
        # velocity is perpindicular to orbital elliptacal. Take unit vector of velocity and multiply by speed to get initial velocity
        self.vel = norm(-a * sin(M0) * ua + b * cos(M0) * ub) * speed

        # display elements
        self.sphere = sphere(pos=self.pos, radius=self.radius, make_trail=True, color=color.gray(50))
        self.trail = curve(color=color.red)
        # add label
        self.label = label(pos=self.pos, text=name)

scene = display(x=50, y=30, width=1400, height=1000)
Sun = sphere(pos=(0, 0, 0), radius=1e10, color=color.orange, material=materials.emissive)
lPlanets = []
lPlanets.append(planet(1.00000011 * 1.496e+11, 0.01671022, 0.00005, -11.26064, 102.94719, 100.46435, 5.972e24, 'Earth'))


def helloCallBack():
    lPlanets[0].sphere.color = color.red

def mv_earth ():
    x=0
    # use newtons equation for gravity, F = G*M1*M2/r^2
    F = -1 * norm(lPlanets[x].pos) * (GAMMA * MASS_SUN * lPlanets[x].mass / (pow(mag(lPlanets[x].pos), 2)))
    # use F = M*A to find accelelration of planet
    A = F / lPlanets[x].mass

    # symplectic Euler
    lPlanets[x].vel += DELTA * A
    lPlanets[x].pos += DELTA * lPlanets[x].vel

    # display info
    lPlanets[x].sphere.pos = lPlanets[x].pos
    lPlanets[x].trail.append(pos=lPlanets[x].sphere.pos)

    # move labels
    lPlanets[x].label.pos = lPlanets[x].pos
    top.after(50,mv_earth)


B = Tkinter.Button(top, text ="Hello", command = helloCallBack)
LF = Tkinter.LabelFrame(top, height = 300, width = 300)
LF.pack()
B.pack()


top.after(0, mv_earth)
top.mainloop()



